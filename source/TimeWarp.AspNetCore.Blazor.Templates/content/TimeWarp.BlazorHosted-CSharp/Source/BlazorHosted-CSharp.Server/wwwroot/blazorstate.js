!function(e){var t={};function o(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)o.d(n,s,function(t){return e[t]}.bind(null,s));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlazorStateName="BlazorState",t.DevToolsName="devTools",t.InitializeJavaScriptInteropName="InitializeJavaScriptInterop",t.JsonRequestHandlerMethodName="Handle",t.JsonRequestHandlerName="jsonRequestHandler",t.ReduxDevToolsFactoryName="ReduxDevToolsFactory",t.ReduxDevToolsName="reduxDevTools",t.ReduxExtentionName="__REDUX_DEVTOOLS_EXTENSION__"},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(2),s=o(3),a=o(0);function r(e){window[a.JsonRequestHandlerName]=e}function i(){const e=new s.ReduxDevTools;return window[a.ReduxDevToolsName]=e,e.IsEnabled}console.log("Initialize BlazorState"),"undefined"==typeof window||window[a.BlazorStateName]||(window[a.BlazorStateName]=new n.BlazorState,window[a.ReduxDevToolsFactoryName]=i,window[a.InitializeJavaScriptInteropName]=r)},function(e,t,o){"use strict";var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))(function(s,a){function r(e){try{l(n.next(e))}catch(e){a(e)}}function i(e){try{l(n.throw(e))}catch(e){a(e)}}function l(e){e.done?s(e.value):new o(function(t){t(e.value)}).then(r,i)}l((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const s=o(0);t.BlazorState=class{DispatchRequest(e,t){return n(this,void 0,void 0,function*(){const o=JSON.stringify(t);console.log(`Dispatching request of Type ${e}: ${o}`),yield window[s.JsonRequestHandlerName].invokeMethodAsync(s.JsonRequestHandlerMethodName,e,o)})}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(0);t.ReduxDevTools=class{constructor(){this.MessageHandler=(e=>{console.log("ReduxDevTools.MessageHandler"),console.log(e);const t=this.MapRequestType(e);t?this.BlazorState.DispatchRequest(t,e):console.log("messages of this type are currently not supported")}),this.BlazorState=window[n.BlazorStateName],this.Config={name:"Blazor State",features:{pause:!1,lock:!1,persist:!1,export:!1,import:!1,jump:!0,skip:!1,reorder:!1,dispatch:!1,test:!1}},this.Extension=this.GetExtension(),this.DevTools=this.GetDevTools(),this.IsEnabled=!!this.DevTools,this.Init()}Init(){this.IsEnabled&&(this.DevTools.subscribe(this.MessageHandler),window[n.DevToolsName]=this.DevTools)}GetExtension(){const e=window[n.ReduxExtentionName];return e||console.log("Redux DevTools are not installed."),e}GetDevTools(){const e=this.Extension&&this.Extension.connect(this.Config);return e||console.log("Unable to connect to Redux DevTools."),e}MapRequestType(e){var t,o={COMMIT:void 0,IMPORT_STATE:void 0,JUMP_TO_ACTION:"BlazorState.Behaviors.ReduxDevTools.Features.JumpToState.JumpToStateRequest",JUMP_TO_STATE:"BlazorState.Behaviors.ReduxDevTools.Features.JumpToState.JumpToStateRequest",RESET:void 0,ROLLBACK:void 0,TOGGLE_ACTION:void 0};switch(e.type){case"START":t="BlazorState.Behaviors.ReduxDevTools.Features.Start.StartRequest";break;case"STOP":break;case"DISPATCH":t=o[e.payload.type]}return t&&console.log(`Redux Dev tools type: ${e.type} maps to ${t}`),t}ReduxDevToolsDispatch(e,t){return"init"===e?window[n.DevToolsName].init(t):window[n.DevToolsName].send(e,t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,