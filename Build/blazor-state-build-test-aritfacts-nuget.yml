# Built-test-artifacts-prod pipeline
# Build the blazor-state package
# Run the tests
# Deploy to Azure-DevOps Artifacts
# Deploy to Nuget and or GitHub Package Managers
# Create a Release in GitHub

# Only run against master
trigger:
- master

# Don't run against PRs
pr: none

variables:
  Major: '1'
  Minor: '0'
  MajorAndMinor: '$(Major).$(Minor)'
  Patch: $[counter(variables.MajorAndMinor,0)]
  DotNetSdkVersion: 3.0.100
  Version: '$(Major).$(Minor).$(Patch)+$(DotNetSdkVersion)'
  Configuration: debug

stages:
- stage: build
  jobs:
  - job: run_build
    steps:
    - script: echo Build
    - script: echo $(Version)
    - script: cleanup -y
    # - task: dutchworkz.DisplayAllVariables.DisplayAllVariables.DutchWorkzToolsAllVariables@1
    #   displayName: 'Show all build variables in build output.'

    - task: DotNetCoreCLI@2
      displayName: Build BlazorState
      inputs:
        command: build
        arguments: '-maxcpucount:1 -p:Version=$(Version)'
        projects: 'Source/BlazorState/BlazorState.csproj'
    
    - task: PublishBuildArtifacts@1
      displayName: Publish Nuget Artifact
      inputs:
        PathtoPublish: $(System.DefaultWorkingDirectory)/Source/BlazorState/bin/Packages
        ArtifactName: Nuget
        publishLocation: Container

- stage: test
  dependsOn: build
  jobs:
  - job: run_tests
    steps:
    - script: echo Test
    - task: DotNetCoreCLI@2
      displayName: 'Run all the Integration Tests in the repo and gather coverage data'
      continueOnError: false
      inputs:
        command: test
        arguments: '-maxcpucount:1 /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:UseSourceLink=true /p:Include="[BlazorState]*"'
        projects: '**/*.Integration.Tests/*.csproj'

    - task: reportgenerator@4
      displayName: 'Test coverage Report Generator'
      inputs:
        reports: '$(Build.SourcesDirectory)/Tests/**/coverage.cobertura.xml'
        targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
        historydir: '$(Build.SourcesDirectory)/CodeCoverage/History'
        assemblyfilters: '+BlazorState'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
    
- stage: development
  dependsOn: test
  jobs:
  - job: deploy_staging
    steps:
    - script: echo development
    - script: echo $(Build.ArtifactStagingDirectory)

    - task: NuGetCommand@2
      displayName: 'Push NuGet to Azure Devops Nuget feed.'
      inputs:
        command: push
        packagesToPush: '$(Pipeline.Workspace)/Nuget/*.nupkg;!$(Build.ArtifactStagingDirectory)/Nuget/*.symbols.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'dfe61826-f0b9-46b3-a391-23626fc363f2'


- stage: production
  dependsOn: development
  jobs:
  - deployment: DeployNuget
    displayName: Deploy To Nuget.org
    environment: NuGet-org 
    strategy:
     runOnce:
       deploy:
        steps:
        - script: echo Deployed to Production

        - task: GitHubRelease@1
          displayName: 'GitHub release (create)'
          inputs:
            gitHubConnection: 'TimeWarp Enterprises GitHub'
            target: '$(Build.SourceVersion)'
            tagSource: userSpecifiedTag
            tag: '$(GitHubReleaseVersion)'
            repositoryName: 'TimeWarpEngineering/blazor-state'
            title: '$(GitHubReleaseVersion)'
            releaseNotesSource: filePath
            releaseNotesFilePath: 'Documentation/ReleaseNotes.md'
            addChangeLog: true
            changeLogCompareToRelease: 'lastFullRelease'
            changeLogType: 'commitBased'
