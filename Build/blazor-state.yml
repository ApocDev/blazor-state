trigger:
 branches:
  include:
  - master
 paths:
  include:
  - source/BlazorState/*
  - source/BlazorState.Js/*

# no PR builds
pr:
- master
- releases/*

queue:
  name: TimeWarpEnterprises

steps:
- script: echo Build.SourceVersion $(Build.SourceVersion)
- script: echo Build.SourceVersion $(BuildConfiguration)

- task: Npm@1
  inputs:
    command: 'install'
    workingDir: source/BlazorState.Js

- task: DotNetCoreCLI@2
  displayName: Build BlazorState
  inputs:
    command: build
    projects: 'source/BlazorState/BlazorState.csproj'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/source/BlazorState/bin/Version.txt'
    ArtifactName: Version
    publishLocation: Container

# Delete files
# Delete folders, or files matching a pattern
#- task: DeleteFiles@1
#  inputs: 
#    sourceFolder: source/BlazorState.Js/bin
#    contents: \*

- task: DotNetCoreCLI@2
  displayName: Run all Tests in the repo gather coverage data
  continueOnError: false
  inputs:
    command: test
    arguments: '--no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    projects: "**/*Tests/*.csproj"

- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  displayName: ReportGenerator
  inputs:
    reports: 'src\target\reports\coverage\coverage.opencover.xml'
    targetdir: 'src\target\reports\coverage'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
    assemblyfilters: '-xunit*'

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

# Publish code coverage results
# Publish Cobertura or JaCoCo code coverage results from a build
- task: PublishCodeCoverageResults@1
  inputs:
    #codeCoverageTool: 'JaCoCo' # Options: cobertura, jaCoCo
    summaryFileLocation: 
    #pathToSources: # Optional
    #reportDirectory: # Optional
    #additionalCodeCoverageFiles: # Optional
    #failIfCoverageEmpty: false # Optional

# Upload coverage to codecov.io
# - script: |
#    %USERPROFILE%\.nuget\packages\codecov\1.5.0\tools\codecov.exe -f "./test/MyTestProject/coverage.opencover.xml" -t $(CODECOV_TOKEN)
# displayName: Upload coverage to codecov.io


- task: DotNetCoreCLI@2
  displayName: dotnet pack blazor-state
  inputs:
    command: pack
    packagesToPack: 'source\BlazorState\BlazorState.csproj'
    configurationToPack: debug
    
- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    ArtifactName: Nuget
    publishLocation: Container
